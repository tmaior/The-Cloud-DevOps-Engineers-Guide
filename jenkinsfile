pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '654654369899.dkr.ecr.us-east-1.amazonaws.com/flask-tasksapp'
        REPO_URL = 'https://github.com/tmaior/The-Cloud-DevOps-Engineers-Guide.git'
        APP_PATH = 'The-Cloud-DevOps-Engineers-Guide/tasks-webapp/'
        EC2_HOST = 'ec2-3-88-181-152.compute-1.amazonaws.com' // Replace with your EC2 instance public IP
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${env.REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Login to AWS ECR
                    withCredentials([string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                                     string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                        '''
                    }

                    // Build Docker image
                    sh '''
                    cd ${APP_PATH}
                    docker build -t flask-tasksapp .
                    '''

                    // Tag the Docker image
                    sh '''
                    docker tag flask-tasksapp:latest ${ECR_REPO}:latest
                    '''
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    // Push the Docker image to ECR
                    sh '''
                    docker push ${ECR_REPO}:latest
                    '''
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    // Use Jenkins credentials for SSH connection
                    withCredentials([sshUserPrivateKey(credentialsId: '6517b91f-5a9f-4fe3-81ed-f478c433569c', keyFileVariable: 'KEY_PATH', usernameVariable: 'EC2_USER')]) {
                        sh '''
                        ssh -o StrictHostKeyChecking=no -i ${KEY_PATH} ${EC2_USER}@${EC2_HOST} <<EOF
                            # Stop and remove the current container if it exists
                            docker stop flask-tasksapp || true
                            docker rm flask-tasksapp || true
                            
                            # Pull the latest image from ECR
                            docker pull ${ECR_REPO}:latest
                            
                            # Run the container
                            docker run -d -p 80:80 --name flask-tasksapp ${ECR_REPO}:latest
                        EOF
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
